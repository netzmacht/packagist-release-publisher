#!/usr/bin/env php
<?php

declare(strict_types=1);

namespace App;

use App\Command\ListReleasesCommand;
use App\Command\PublishReleaseNotesCommand;
use App\Config\Configuration;
use App\Publisher\DelegatingPublisher;
use App\Publisher\NoOpPublisher;
use App\Packagist\PackageReleases;
use App\Publisher\Tapatalk\PostPublisher;
use App\Publisher\Tapatalk\TopicPublisher;
use App\Publisher\Tapatalk\Renderer\CallableRenderer;
use App\Rss\Http\Client\GuzzleClientAdapter;
use GuzzleHttp\Client as HttpClient;
use Netzmacht\Tapatalk\Factory;
use Symfony\Component\Console\Application;
use Symfony\Component\Filesystem\Filesystem;

(function () {
    require_once dirname(__DIR__) . '/vendor/autoload.php';

    // Load configuration and create package configuration.
    $config        = require dirname(__DIR__) . '/config/config.php';
    $configuration = Configuration::fromArray($config['packages']);

    // Create packagist package releases endpoint
    $client   = new GuzzleClientAdapter(new HttpClient(['base_uri' => $config['packagist']['url']]));
    $releases = new PackageReleases($client, $configuration);

    // Create publisher.
    if ($config['debug']) {
        $publisher = new NoOpPublisher();
    } else {
        $publishers = [];

        if (isset($config['tapatalk'])) {
            // Create tapatalk api client
            $tapatalk = Factory::connect(
                $config['tapatalk']['url'],
                $config['tapatalk']['user'],
                $config['tapatalk']['password']
            );

            // Create default release not renderer
            $renderer = new CallableRenderer(
                $config['tapatalk']['renderer']['subject'],
                $config['tapatalk']['renderer']['body']
            );

            $publishers[] = new PostPublisher($tapatalk, $configuration, $renderer);
            $publishers[] = new TopicPublisher($tapatalk, $configuration, $renderer);
        }

        $publisher = new DelegatingPublisher($publishers);
    }

    $lastRunFile = dirname(__DIR__) . '/data/lastrun.txt';
    $fileSystem  = new Filesystem();

    $listReleasesCommand        = new ListReleasesCommand($releases, $fileSystem, $lastRunFile);
    $publishReleaseNotesCommand = new PublishReleaseNotesCommand($publisher, $fileSystem, $releases, $lastRunFile);

    (new Application('packagist-release-publisher', '0.1.0'))
        ->add($publishReleaseNotesCommand)->getApplication()
        ->add($listReleasesCommand)->getApplication()
        ->run();
})();

